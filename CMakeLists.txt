CMAKE_MINIMUM_REQUIRED(VERSION 3.0)
PROJECT(rnn2d)
ENABLE_TESTING()

OPTION(WITH_CUDA "Compile binaries with CUDA support" ON)
OPTION(WITH_TORCH "Compile with Torch bindings" ON)

LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")

FIND_PACKAGE(BLAS REQUIRED)
FIND_PACKAGE(Glog REQUIRED)
FIND_PACKAGE(GTest)
FIND_PACKAGE(GMock)
FIND_PACKAGE(OpenMP)
FIND_PACKAGE(CUDA)

INCLUDE_DIRECTORIES(${GLOG_INCLUDE_DIRS})
SET(CUDA_PROPAGATE_HOST_FLAGS OFF)
SET(COMMON_LIBRARIES "${GLOG_LIBRARIES}")

SET(CMAKE_CXX_FLAGS "-std=c++0x -pedantic -Wall")
IF(OPENMP_FOUND)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
ENDIF()

SET(CUDA_NVCC_FLAGS "-std=c++11 -lineinfo -Xcompiler -Wall,-std=c++0x")
SET(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} ${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE}}")
IF (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 5)
  SET(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} -D_MWAITXINTRIN_H_INCLUDED")
ENDIF()

FIND_PACKAGE(Perftools)
IF(Perftools_FOUND)
  MESSAGE(STATUS "Google Perftools found! Linking with ${Perftools_LIBRARIES}")
  INCLUDE_DIRECTORIES(${Perftools_INCLUDE_DIRS})
  LIST(APPEND COMMON_LIBRARIES "${Perftools_LIBRARIES}")
  IF ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    SET(CMAKE_CXX_FLAGS
      "${CMAKE_CXX_FLAGS} -fno-builtin-malloc -fno-builtin-calloc -fno-builtin-realloc -fno-builtin-free")
  ENDIF()
  IF (CUDA_FOUND)
    SET(CUDA_NVCC_FLAGS
      "${CUDA_NVCC_FLAGS} -Xcompiler -fno-builtin-malloc,-fno-builtin-calloc,-fno-builtin-realloc,-fno-builtin-free")
  ENDIF()
ENDIF()


## CPU library
ADD_LIBRARY(rnn2d_cpu SHARED lstm_cpu.cc)
TARGET_LINK_LIBRARIES(rnn2d_cpu ${BLAS_LIBRARIES} ${COMMON_LIBRARIES})

## GPU library
IF(CUDA_FOUND AND WITH_CUDA)
  CUDA_ADD_LIBRARY(rnn2d_gpu SHARED lstm_gpu.cu)
  CUDA_ADD_CUBLAS_TO_TARGET(rnn2d_gpu)
  TARGET_LINK_LIBRARIES(rnn2d_gpu ${COMMON_LIBRARIES})
ENDIF()


## TESTS
IF(GTEST_FOUND AND GMOCK_FOUND)
  INCLUDE_DIRECTORIES(${GTEST_INCLUDE_DIRS})
  INCLUDE_DIRECTORIES(${GMOCK_INCLUDE_DIRS})

  # CPU TESTS
  ADD_EXECUTABLE(lstm_cpu_test lstm_cpu_test.cc)
  TARGET_LINK_LIBRARIES(lstm_cpu_test rnn2d_cpu ${GMOCK_MAIN_LIBRARIES}
    ${COMMON_LIBRARIES})
  ADD_TEST(lstm_cpu_test lstm_cpu_test)

  # GPU TESTS
  IF (CUDA_FOUND AND WITH_CUDA)
    CUDA_ADD_EXECUTABLE(lstm_gpu_test lstm_gpu_test.cu)
    TARGET_LINK_LIBRARIES(lstm_gpu_test rnn2d_gpu ${GMOCK_MAIN_LIBRARIES}
      ${COMMON_LIBRARIES})
    ADD_TEST(lstm_gpu_test lstm_gpu_test)
  ENDIF()
ENDIF()

## INSTALL
INSTALL(FILES
  lstm_cpu.h lstm_gpu.h lstm_helper.h
  DESTINATION include/rnn2d)

INSTALL(TARGETS
  rnn2d_cpu rnn2d_gpu
  RUNTIME DESTINATION bin
  LIBRARY DESTINATION lib
  ARCHIVE DESTINATION lib)

ADD_SUBDIRECTORY(bench)
ADD_SUBDIRECTORY(torch)
